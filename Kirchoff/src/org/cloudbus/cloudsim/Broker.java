package org.cloudbus.cloudsim;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.core.CloudSimTags;
import org.cloudbus.cloudsim.core.SimEntity;
import org.cloudbus.cloudsim.core.SimEvent;
import org.cloudbus.cloudsim.requestsgenerator.RequestsGenerator;

/**
 * Implements a broker that sends only requests for services (e.g, a type of SaaS broker)
 * workload is generated by an external RequestsGenerator that may implement different
 * methods for defining number of requests and intervals between them.
 * @author rodrigo
 *
 */
public class Broker extends SimEntity{

	private RequestsGenerator generator;
	private List<Integer> datacenterIdsList;
	private Map<Integer, DatacenterCharacteristics> datacenterCharacteristicsList;
	private int initialVms;

	private List<? extends Cloudlet> cloudletReceivedList;
	private long rejectedRequests;
	private long acceptedrequests;
	private double serviceTime;
	private double rejection;
	private int idx;
	private int qosAgreedDatacenters;
	protected boolean generatingRequests;

	public Broker(String name,RequestsGenerator generator, int initialVms, double serviceTime,double rejection) {
		super(name);

		setDatacenterIdsList(new LinkedList<Integer>());
		setDatacenterCharacteristicsList(new HashMap<Integer, DatacenterCharacteristics>());
		setCloudletReceivedList(new ArrayList<Cloudlet>());

		this.initialVms = initialVms;
		this.generator = generator;
		this.serviceTime = serviceTime;
		this.rejection = rejection;
		rejectedRequests = 0;
		acceptedrequests = 0;
		qosAgreedDatacenters = 0;
		idx=0;
		generatingRequests = true;
	}

	@Override
	public void processEvent(SimEvent ev) {
		//Log.printLine(CloudSim.clock()+"[Broker]: event received:"+ev.getTag());
		switch (ev.getTag()){
		// Resource characteristics request
		case CloudSimTags.RESOURCE_CHARACTERISTICS_REQUEST:
			processResourceCharacteristicsRequest(ev);
			break;
		// Resource characteristics answer
		case CloudSimTags.RESOURCE_CHARACTERISTICS:
			processResourceCharacteristics(ev);
			break;
		//Response from Coordinator about initial VMs
		case CloudSimTags.VM_CREATE_ACK:
			processVmCreateAck();
			break;
		// Response from Coordinator about QoS
		case SaaSDatacenter.SET_QOS_ACK:
			processSetQosAck(ev);
			break;
		// Response from Coordinator about processing a request
		case SaaSDatacenter.SERVICE_REQUEST_ACK:
			processServiceRequestAck(ev);
			break;
		// A finished cloudlet returned
		case CloudSimTags.CLOUDLET_RETURN:
			processCloudletReturn(ev);
			break;
		// Internal event: generate load
		case CloudSimTags.VM_BROKER_EVENT:
			processInternalEvent();
			break;
		// If the simulation finishes
		case CloudSimTags.END_OF_SIMULATION:
			shutdownEntity();
			break;
		// Other unknown tags are processed by this method
		default:
			Log.printLine(getName() + ".processOtherEvent(): " + "Error - event unknown by this DatacenterBroker.");
			break;
		}
	}

	protected void processResourceCharacteristicsRequest(SimEvent ev) {
		setDatacenterIdsList(CloudSim.getCloudResourceList());
		setDatacenterCharacteristicsList(new HashMap<Integer, DatacenterCharacteristics>());

		Log.printLine(CloudSim.clock()+": "+getName()+ ": Cloud Resource List received with "+getDatacenterIdsList().size()+" resource(s)");

		for (Integer datacenterId : getDatacenterIdsList()) {
			sendNow(datacenterId, CloudSimTags.RESOURCE_CHARACTERISTICS, getId());
		}
	}

	protected void processResourceCharacteristics(SimEvent ev) {
		DatacenterCharacteristics characteristics = (DatacenterCharacteristics) ev.getData();
		getDatacenterCharacteristicsList().put(characteristics.getId(), characteristics);

		if (getDatacenterCharacteristicsList().size() == getDatacenterIdsList().size()) {
			requestInitialVms();
		}
	}
	
	@SuppressWarnings("deprecation")
	protected void requestInitialVms(){
		for (Integer datacenterId : getDatacenterIdsList()) {
			sendNow(datacenterId, CloudSimTags.VM_CREATE_ACK, new Integer(initialVms));
		}
	}
	
	protected void processVmCreateAck(){
		qosAgreedDatacenters++;
		if(qosAgreedDatacenters==getDatacenterIdsList().size()){
			qosAgreedDatacenters=0;
			negotiateQoS();
		}
	}
	
	private void processSetQosAck(SimEvent ev) {
		qosAgreedDatacenters++;
		if(qosAgreedDatacenters==getDatacenterIdsList().size()){
			generateLoad();
		}
	}

	private void processServiceRequestAck(SimEvent ev) {
		int data[] = (int[]) ev.getData();
		if (data[2]==CloudSimTags.TRUE){
			acceptedrequests++;
		//	Log.printLine(CloudSim.clock()+":"+this.getName()+": request "+serviceId+" accepted.");
		} else {
			rejectedRequests++;
		//	Log.printLine(CloudSim.clock()+":"+this.getName()+": request "+serviceId+" rejected ("+rejectedRequests+" so far).");
		}
	}

	protected void processCloudletReturn(SimEvent ev) {
		//Cloudlet cloudlet = (Cloudlet) ev.getData();
		//getCloudletReceivedList().add(cloudlet);
		//Log.printLine(CloudSim.clock()+":"+this.getName()+": Cloudlet "+cloudlet.getCloudletId()+" received.");
		//pendingRequests--;
		//if (!generatingRequests&&pendingRequests==0) { //all requests executed
	//		Log.printLine(CloudSim.clock()+": "+getName()+ ": All requests executed. Finishing...");
	//		finishExecution();
	//	}
	}
	
	private void processInternalEvent() {
		generateLoad();
	}

	@Override
	public void shutdownEntity() {
		Log.printLine(getName() + " is shutting down...");
	}

	@Override
	public void startEntity() {
		Log.printLine(getName() + " is starting...");
		schedule(getId(), 0, CloudSimTags.RESOURCE_CHARACTERISTICS_REQUEST);
	}
	
	private void negotiateQoS() {
		double[] params = new double[2];
		params[0] = serviceTime;
		params [1] = rejection;
		for (Integer datacenterId : getDatacenterIdsList()) {
			sendNow(datacenterId, SaaSDatacenter.SET_QOS,params);
		}
	}
	
	protected void generateLoad(){
		if (generatingRequests){
			double currentTime = CloudSim.clock();// its returning already 3600
			sendRequests(generator.nextRequests(currentTime));
			double delay = generator.delayToNextEvent(currentTime);
			if (delay>0.0){
				send(this.getId(),delay,CloudSimTags.VM_BROKER_EVENT);
			} else { //there is no next event; prepare to finish
				generatingRequests=false;
				//if(pendingRequests==0) { 
					Log.printLine(CloudSim.clock()+": "+getName()+ ": All requests executed. Finishing...");
					finishExecution();
				//}
			}
		}
	}
	
	private void sendRequests(ServiceRequest requests){
		if(requests.getNumberOfRequests()>0) //Log.printLine(CloudSim.clock()+":"+this.getName()+":"+"Sending "+requests.getNumberOfRequests()+" requests of type "+requests.getServiceType());
		for(int i=0;i<requests.getNumberOfRequests();i++){
			sendNow(this.getDatacenterIdsList().get(0),SaaSDatacenter.SERVICE_REQUEST,new Service(idx,requests.getServiceType()));
			idx++;
		}
	}

	private void finishExecution() {
		for(int id:this.getDatacenterIdsList())	sendNow(id,CloudSimTags.VM_DESTROY);
		sendNow(getId(), CloudSimTags.END_OF_SIMULATION);
	}

	protected List<Integer> getDatacenterIdsList() {
		return datacenterIdsList;
	}

	protected void setDatacenterIdsList(List<Integer> datacenterIdsList) {
		this.datacenterIdsList = datacenterIdsList;
	}

	protected Map<Integer, DatacenterCharacteristics> getDatacenterCharacteristicsList() {
		return datacenterCharacteristicsList;
	}

	protected void setDatacenterCharacteristicsList(Map<Integer, DatacenterCharacteristics> datacenterCharacteristicsList) {
		this.datacenterCharacteristicsList = datacenterCharacteristicsList;
	}

	protected <T extends Cloudlet> void setCloudletReceivedList(List<T> cloudletReceivedList) {
		this.cloudletReceivedList = cloudletReceivedList;
	}

	@SuppressWarnings("unchecked")
	public <T extends Cloudlet> List<T> getCloudletReceivedList() {
		return (List<T>) cloudletReceivedList;
	}

	public long getRejectedRequests(){
		return rejectedRequests;
	}

	/*
	 * public long getCompletedRequests(){ return
	 * this.getCloudletReceivedList().size(); }
	 */
	/*
	 * public long getPendingRequests(){ return pendingRequests; }
	 */
	public long getGeneratedRequests(){
		//return rejectedRequests+pendingRequests+this.getCloudletReceivedList().size();
		return rejectedRequests+acceptedrequests;
	}
	
	public void printExecutionSummary() {
		DecimalFormat dft = new DecimalFormat("#####.00");
		String indent = "\t";
		
		Log.printLine("ID  " + indent + "Status" + indent + indent + "Start Time" + indent + indent + "Service Time (s)" + indent + "Execution Time (s)" + indent + "Finish Time");
		for (Cloudlet cloudlet: getCloudletReceivedList()) {
			Log.print(" "+cloudlet.getCloudletId() + indent);

			if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS){
				Log.print("SUCCESS");
				double serviceTime = cloudlet.getWallClockTime();
				if(serviceTime>this.serviceTime) {
				}
				double executionTime = cloudlet.getFinishTime()-cloudlet.getExecStartTime();
				Log.printLine(indent + indent + dft.format(cloudlet.getSubmissionTime()) + indent + indent + indent + dft.format(serviceTime) + indent + indent + indent + dft.format(executionTime) + indent + indent + indent + dft.format(cloudlet.getFinishTime()));
			} else if (cloudlet.getCloudletStatus() == Cloudlet.FAILED) {
				Log.printLine("FAIL");
			}
		}
		Log.printLine();
		/**
		Log.printLine("========== BROKER SUMMARY ==========");
		Log.printLine("= Name: "+getName());
		Log.printLine("= Submitted: "+getGeneratedRequests());
		Log.printLine("= Rejected: "+getRejectedRequests());
		//Log.printLine("= Completed: "+getCloudletReceivedList().size());
		//double completionRate=getCloudletReceivedList().size()/(double)getGeneratedRequests();
		//Log.printLine("= Completions: "+percent.format(completionRate));
		double rejectionRate=getRejectedRequests()/(double)getGeneratedRequests();
		Log.printLine("= Rejections: "+percent.format(rejectionRate));
		//double average = sumOfResponseTime/success;
		double voil=violations/((double)success);
		double qos = ((getRejectedRequests() * 100 )/getGeneratedRequests()); //percentage of refused requests
		
		Log.printLine("= QoS violations: "+percent.format(qos));
		//double meanSqrtRespTime = sumOfSqrtRespTime/success;
		//double stddev = Math.sqrt(meanSqrtRespTime-average*average);
		//Log.printLine("= Average service time (s): "+dft.format(average));
		//Log.printLine("= STD service time (s): "+dft.format(stddev));
		Log.printLine("========== END OF SUMMARY =========");
		**/
	}
}
